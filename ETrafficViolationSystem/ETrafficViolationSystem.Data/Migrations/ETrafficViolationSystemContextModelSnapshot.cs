// <auto-generated />
using System;
using ETrafficViolationSystem.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ETrafficViolationSystem.Data.Migrations
{
    [DbContext(typeof(ETrafficViolationSystemContext))]
    partial class ETrafficViolationSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.BankBranch", b =>
                {
                    b.Property<int>("BankBranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("BankId")
                        .HasColumnType("tinyint");

                    b.Property<int>("BranchCode")
                        .HasColumnType("int");

                    b.Property<string>("BranchTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("BankBranchId");

                    b.HasIndex("BankId");

                    b.HasIndex("CityId");

                    b.ToTable("BankBranch");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.Banks", b =>
                {
                    b.Property<byte>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<string>("ShortCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("BankId");

                    b.HasIndex(new[] { "Title" }, "IX_Banks_Title")
                        .IsUnique();

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.CarMake", b =>
                {
                    b.Property<short>("MakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<string>("MakeTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OriginCountryId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("MakeId");

                    b.HasIndex("OriginCountryId");

                    b.ToTable("CarMake");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.CarModel", b =>
                {
                    b.Property<string>("ModelId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<short>("MakeId")
                        .HasColumnType("smallint");

                    b.Property<string>("ModelTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("ModelId");

                    b.HasIndex("MakeId");

                    b.ToTable("CarModel");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.HasIndex(new[] { "CityTitle" }, "IX_City_CityTitle")
                        .IsUnique();

                    b.ToTable("City");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CountryTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("DialingCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<string>("ShortCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("CountryId");

                    b.HasIndex(new[] { "CountryTitle" }, "IX_Country_CountryTitle")
                        .IsUnique();

                    b.ToTable("Country");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.Designation", b =>
                {
                    b.Property<byte?>("DesignationId")
                        .HasColumnType("tinyint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<byte?>("ReportsTo")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("DesignationId");

                    b.ToTable("Designation");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.DriverDetails", b =>
                {
                    b.Property<int?>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("BloodGroupId")
                        .IsRequired()
                        .HasColumnType("tinyint");

                    b.Property<string>("CNIC")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("CityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool?>("Disability")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("DisabilityDescription")
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("Dob")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<byte?>("Gender")
                        .IsRequired()
                        .HasColumnType("tinyint");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PermanentAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<byte?>("Religion")
                        .IsRequired()
                        .HasColumnType("tinyint");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("DriverId");

                    b.HasIndex("CityId");

                    b.HasIndex(new[] { "CNIC" }, "IX_DriverDetails_CNIC")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "IX_DriverDetails_Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("DriverDetails");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.ExceptionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("ExceptionMessage")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("InnerException")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RemoteIp")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("ExceptionLog");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.Infractions", b =>
                {
                    b.Property<int>("InfractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<int>("Penalty")
                        .HasColumnType("int");

                    b.Property<byte>("Points")
                        .HasColumnType("tinyint");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("InfractionId");

                    b.ToTable("Infractions");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.LicenseRecords", b =>
                {
                    b.Property<int>("LicenseNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("date");

                    b.Property<string>("LicenseImageBack")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LicenseImageFront")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<byte>("LicenseTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int?>("PdlNo")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<bool>("Suspended")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SuspensionEndDate")
                        .HasColumnType("date");

                    b.Property<bool>("Terminated")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("LicenseNo");

                    b.HasIndex("LicenseTypeId");

                    b.HasIndex(new[] { "DriverId" }, "IX_LicenseRecords_DriverId")
                        .IsUnique();

                    b.HasIndex(new[] { "PdlNo" }, "IX_LicenseRecords_PdlNo")
                        .IsUnique()
                        .HasFilter("[PdlNo] IS NOT NULL");

                    b.ToTable("LicenseRecords");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.LicenseSubTypes", b =>
                {
                    b.Property<byte>("LicenseSubTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<byte>("LicenseTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("SubTypeClass")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("LicenseSubTypeId");

                    b.HasIndex("LicenseTypeId");

                    b.ToTable("LicenseSubTypes");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.LicenseTypes", b =>
                {
                    b.Property<byte>("LicenseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("LicenseTypeId");

                    b.ToTable("LicenseTypes");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.Officers", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("BloodGroupId")
                        .HasColumnType("tinyint");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Cnic")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<byte>("DesignationId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("OfficerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficerImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PermanentAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("UserId");

                    b.HasIndex("CityId");

                    b.HasIndex("DesignationId");

                    b.HasIndex(new[] { "Cnic" }, "IX_Officers_Cnic")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "IX_Officers_Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex(new[] { "UserId" }, "IX_Officers_UserId")
                        .IsUnique();

                    b.ToTable("Officers");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.OwnerDetails", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CNIC")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("OwnerImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PermanentAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("OwnerId");

                    b.HasIndex("CityId");

                    b.HasIndex(new[] { "CNIC" }, "IX_OwnerDetails_CNIC")
                        .IsUnique();

                    b.ToTable("OwnerDetails");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.PaymentMode", b =>
                {
                    b.Property<byte>("PaymentModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("PaymentModeId");

                    b.HasIndex(new[] { "Title" }, "IX_PaymentMode_Title")
                        .IsUnique();

                    b.ToTable("PaymentMode");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.Payments", b =>
                {
                    b.Property<int>("ChallanNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankBranchId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<int>("PaidAmount")
                        .HasColumnType("int");

                    b.Property<byte>("PaymentModeId")
                        .HasColumnType("tinyint");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("ChallanNo");

                    b.HasIndex("BankBranchId");

                    b.HasIndex("PaymentModeId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.RoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.States", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<string>("StateTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.HasIndex(new[] { "StateTitle" }, "IX_States_StateTitle")
                        .IsUnique();

                    b.ToTable("States");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.TaxDetails", b =>
                {
                    b.Property<int>("TaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("PaidUpToDate")
                        .HasColumnType("date");

                    b.Property<byte>("TaxFilerType")
                        .HasColumnType("tinyint");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("TaxId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("TaxDetails");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.UserTokens", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.VehicleBodyType", b =>
                {
                    b.Property<byte>("BodyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("BodyId");

                    b.ToTable("VehicleBodyType");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.VehicleClass", b =>
                {
                    b.Property<byte>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassTitle")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("ClassId");

                    b.HasIndex(new[] { "ClassTitle" }, "IX_VehicleClass_ClassTitle")
                        .IsUnique();

                    b.ToTable("VehicleClass");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.VehicleColorType", b =>
                {
                    b.Property<byte>("ColorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorTypeTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("ColorTypeId");

                    b.ToTable("VehicleColorType");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.VehicleColors", b =>
                {
                    b.Property<short>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("ColorTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("ColorId");

                    b.HasIndex("ColorTypeId");

                    b.ToTable("VehicleColors");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.VehicleDetails", b =>
                {
                    b.Property<int>("VehicleDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ClearanceStatus")
                        .HasColumnType("bit");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationCityId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("VehicleDetailId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RegistrationCityId");

                    b.HasIndex("VehicleId");

                    b.HasIndex(new[] { "RegistrationNo" }, "IX_VehicleDetails_RegistrationNo")
                        .IsUnique();

                    b.ToTable("VehicleDetails");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.Vehicles", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("BodyTypeId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Capacity")
                        .HasColumnType("tinyint");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChassisNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<byte>("ClassId")
                        .HasColumnType("tinyint");

                    b.Property<short>("ColorId")
                        .HasColumnType("smallint");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<byte>("Cylinders")
                        .HasColumnType("tinyint");

                    b.Property<string>("EngineNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FrameNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("HorsePower")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<short>("MakeId")
                        .HasColumnType("smallint");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("VehicleId");

                    b.HasIndex("BodyTypeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("ColorId");

                    b.HasIndex("MakeId");

                    b.HasIndex(new[] { "ChassisNo" }, "IX_Vehicles_ChassisNo")
                        .IsUnique();

                    b.HasIndex(new[] { "EngineNo" }, "IX_Vehicles_EngineNo")
                        .IsUnique();

                    b.HasIndex(new[] { "FrameNo" }, "IX_Vehicles_FrameNo")
                        .IsUnique();

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.ViolationRecordDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("InfractionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("ViolationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InfractionId");

                    b.HasIndex("ViolationId");

                    b.ToTable("ViolationRecordDetails");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.ViolationRecords", b =>
                {
                    b.Property<int>("ViolationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ChallanNo")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("1");

                    b.Property<int>("LicenseNo")
                        .HasColumnType("int");

                    b.Property<string>("LocationLatitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LocationLongitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PointsDeducted")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("VehicleDetailId")
                        .HasColumnType("int");

                    b.HasKey("ViolationId");

                    b.HasIndex("CityId");

                    b.HasIndex("LicenseNo");

                    b.HasIndex("VehicleDetailId");

                    b.ToTable("ViolationRecords");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.BankBranch", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.Banks", "Bank")
                        .WithMany("BankBranches")
                        .HasForeignKey("BankId")
                        .HasConstraintName("FK_BankBranch_Banks")
                        .IsRequired();

                    b.HasOne("ETrafficViolationSystem.Entities.Models.City", "City")
                        .WithMany("BankBranches")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_BankBranch_City")
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("City");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.CarMake", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.Country", "Country")
                        .WithMany("CarMakes")
                        .HasForeignKey("OriginCountryId")
                        .HasConstraintName("FK_CarMake_Country")
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.CarModel", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.CarMake", "CarMake")
                        .WithMany("CarModels")
                        .HasForeignKey("MakeId")
                        .HasConstraintName("FK_CarModel_CarMake")
                        .IsRequired();

                    b.Navigation("CarMake");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.City", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.States", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_City_States");

                    b.Navigation("State");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.DriverDetails", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.City", "City")
                        .WithMany("DriverDetails")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_DriverDetails_City")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.LicenseRecords", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.DriverDetails", "Driver")
                        .WithOne("LicenseRecords")
                        .HasForeignKey("ETrafficViolationSystem.Entities.Models.LicenseRecords", "DriverId")
                        .HasConstraintName("FK_LicenseRecords_DriverDetails")
                        .IsRequired();

                    b.HasOne("ETrafficViolationSystem.Entities.Models.LicenseTypes", "LicenseType")
                        .WithMany("LicenseRecords")
                        .HasForeignKey("LicenseTypeId")
                        .HasConstraintName("FK_LicenseRecords_LicenseTypes")
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("LicenseType");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.LicenseSubTypes", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.LicenseTypes", "LicenseTypes")
                        .WithMany("LicenseSubTypes")
                        .HasForeignKey("LicenseTypeId")
                        .HasConstraintName("FK_LicenseSubTypes_LicenseTypes")
                        .IsRequired();

                    b.Navigation("LicenseTypes");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.Officers", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.City", "City")
                        .WithMany("Officers")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Officers_City")
                        .IsRequired();

                    b.HasOne("ETrafficViolationSystem.Entities.Models.Designation", "Designation")
                        .WithMany("Officers")
                        .HasForeignKey("DesignationId")
                        .HasConstraintName("FK_Officers_Designation")
                        .IsRequired();

                    b.HasOne("ETrafficViolationSystem.Entities.Models.Users", "User")
                        .WithOne("Officer")
                        .HasForeignKey("ETrafficViolationSystem.Entities.Models.Officers", "UserId")
                        .HasConstraintName("FK_Officers_Users")
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Designation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.OwnerDetails", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.City", "City")
                        .WithMany("OwnerDetails")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_OwnerDetails_City")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.Payments", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.BankBranch", "BankBranch")
                        .WithMany("Payments")
                        .HasForeignKey("BankBranchId")
                        .HasConstraintName("FK_Payments_BankBranch")
                        .IsRequired();

                    b.HasOne("ETrafficViolationSystem.Entities.Models.PaymentMode", "PaymentMode")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentModeId")
                        .HasConstraintName("FK_Payments_PaymentMode")
                        .IsRequired();

                    b.Navigation("BankBranch");

                    b.Navigation("PaymentMode");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.RoleClaims", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.States", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_States_Country")
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.TaxDetails", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.OwnerDetails", "Owner")
                        .WithMany("TaxDetails")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_TaxDetails_OwnerDetails")
                        .IsRequired();

                    b.HasOne("ETrafficViolationSystem.Entities.Models.Vehicles", "Vehicle")
                        .WithMany("TaxDetails")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_TaxDetails_Vehicles")
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.UserClaim", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.UserLogin", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.UserRole", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETrafficViolationSystem.Entities.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.UserTokens", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.VehicleColors", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.VehicleColorType", "VehicleColorType")
                        .WithMany("VehicleColors")
                        .HasForeignKey("ColorTypeId")
                        .HasConstraintName("FK_VehicleColors_VehicleColorType")
                        .IsRequired();

                    b.Navigation("VehicleColorType");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.VehicleDetails", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.OwnerDetails", "Owner")
                        .WithMany("VehicleDetails")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_VehicleDetails_OwnerDetails")
                        .IsRequired();

                    b.HasOne("ETrafficViolationSystem.Entities.Models.City", "City")
                        .WithMany("VehicleDetails")
                        .HasForeignKey("RegistrationCityId")
                        .HasConstraintName("FK_VehicleDetails_City")
                        .IsRequired();

                    b.HasOne("ETrafficViolationSystem.Entities.Models.Vehicles", "Vehicle")
                        .WithMany("VehicleDetails")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_VehicleDetails_Vehicles")
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Owner");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.Vehicles", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.VehicleBodyType", "VehicleBodyType")
                        .WithMany("Vehicles")
                        .HasForeignKey("BodyTypeId")
                        .HasConstraintName("FK_Vehicles_VehicleBodyType")
                        .IsRequired();

                    b.HasOne("ETrafficViolationSystem.Entities.Models.VehicleClass", "VehicleClass")
                        .WithMany("Vehicles")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_Vehicles_VehicleClass")
                        .IsRequired();

                    b.HasOne("ETrafficViolationSystem.Entities.Models.VehicleColors", "VehicleColor")
                        .WithMany("Vehicles")
                        .HasForeignKey("ColorId")
                        .HasConstraintName("FK_Vehicles_VehicleColors")
                        .IsRequired();

                    b.HasOne("ETrafficViolationSystem.Entities.Models.CarMake", "CarMake")
                        .WithMany("Vehicles")
                        .HasForeignKey("MakeId")
                        .HasConstraintName("FK_Vehicles_CarMake")
                        .IsRequired();

                    b.Navigation("CarMake");

                    b.Navigation("VehicleBodyType");

                    b.Navigation("VehicleClass");

                    b.Navigation("VehicleColor");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.ViolationRecordDetails", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.Infractions", "Infraction")
                        .WithMany("ViolationRecordDetails")
                        .HasForeignKey("InfractionId")
                        .HasConstraintName("FK_ViolationRecordDetails_Infractions")
                        .IsRequired();

                    b.HasOne("ETrafficViolationSystem.Entities.Models.ViolationRecords", "ViolationRecords")
                        .WithMany("ViolationRecordDetails")
                        .HasForeignKey("ViolationId")
                        .HasConstraintName("FK_ViolationRecordDetails_ViolationRecords")
                        .IsRequired();

                    b.Navigation("Infraction");

                    b.Navigation("ViolationRecords");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.ViolationRecords", b =>
                {
                    b.HasOne("ETrafficViolationSystem.Entities.Models.City", "City")
                        .WithMany("ViolationRecords")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_ViolationRecords_City")
                        .IsRequired();

                    b.HasOne("ETrafficViolationSystem.Entities.Models.LicenseRecords", "LicenseRecords")
                        .WithMany("ViolationRecords")
                        .HasForeignKey("LicenseNo")
                        .HasConstraintName("FK_ViolationRecords_LicenseRecords")
                        .IsRequired();

                    b.HasOne("ETrafficViolationSystem.Entities.Models.VehicleDetails", "VehicleDetail")
                        .WithMany("ViolationRecords")
                        .HasForeignKey("VehicleDetailId")
                        .HasConstraintName("FK_ViolationRecords_VehicleDetails")
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("LicenseRecords");

                    b.Navigation("VehicleDetail");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.BankBranch", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.Banks", b =>
                {
                    b.Navigation("BankBranches");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.CarMake", b =>
                {
                    b.Navigation("CarModels");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.City", b =>
                {
                    b.Navigation("BankBranches");

                    b.Navigation("DriverDetails");

                    b.Navigation("Officers");

                    b.Navigation("OwnerDetails");

                    b.Navigation("VehicleDetails");

                    b.Navigation("ViolationRecords");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.Country", b =>
                {
                    b.Navigation("CarMakes");

                    b.Navigation("States");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.Designation", b =>
                {
                    b.Navigation("Officers");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.DriverDetails", b =>
                {
                    b.Navigation("LicenseRecords");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.Infractions", b =>
                {
                    b.Navigation("ViolationRecordDetails");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.LicenseRecords", b =>
                {
                    b.Navigation("ViolationRecords");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.LicenseTypes", b =>
                {
                    b.Navigation("LicenseRecords");

                    b.Navigation("LicenseSubTypes");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.OwnerDetails", b =>
                {
                    b.Navigation("TaxDetails");

                    b.Navigation("VehicleDetails");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.PaymentMode", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.States", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.Users", b =>
                {
                    b.Navigation("Officer");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.VehicleBodyType", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.VehicleClass", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.VehicleColorType", b =>
                {
                    b.Navigation("VehicleColors");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.VehicleColors", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.VehicleDetails", b =>
                {
                    b.Navigation("ViolationRecords");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.Vehicles", b =>
                {
                    b.Navigation("TaxDetails");

                    b.Navigation("VehicleDetails");
                });

            modelBuilder.Entity("ETrafficViolationSystem.Entities.Models.ViolationRecords", b =>
                {
                    b.Navigation("ViolationRecordDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
